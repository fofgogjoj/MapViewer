// <auto-generated />
using MapViewer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MapViewer.Migrations
{
    [DbContext(typeof(MapViewerContext))]
    [Migration("20220619121938_InitialData")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MapViewer.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MapViewer.Models.Place", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Latitude = 55.752307999999999,
                            Longitude = 37.610489000000001,
                            Text = "Библиотека имени Ленина"
                        },
                        new
                        {
                            ID = 2,
                            Latitude = 55.75226,
                            Longitude = 37.608643999999998,
                            Text = "Александровский сад"
                        },
                        new
                        {
                            ID = 3,
                            Latitude = 55.750509000000001,
                            Longitude = 37.609073000000002,
                            Text = "Боровицкая"
                        },
                        new
                        {
                            ID = 4,
                            Latitude = 55.755451000000001,
                            Longitude = 37.619326999999998,
                            Text = "Казанский собор"
                        },
                        new
                        {
                            ID = 5,
                            Latitude = 55.749679,
                            Longitude = 37.608711,
                            Text = "Дом Пашкова"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
